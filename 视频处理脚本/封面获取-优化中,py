import sys
import os
import subprocess
import xml.etree.ElementTree as ET

# 配置参数
WINDOW_SIZE = 2  # 秒，用于连续弹幕分析（可选）
DANMAKU_THRESHOLD = 5  # 窗口内弹幕数阈值（可选）

def parse_danmaku(xml_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()
    times = []
    for d in root.findall('d'):
        p = d.get('p')
        if p:
            try:
                stime = float(p.split(',')[0])
                times.append(int(stime))  # 取整秒
            except:
                continue
    return times

def build_timeline(times):
    if not times:
        return []
    max_sec = max(times)
    timeline = [0] * (max_sec + 1)
    for t in times:
        timeline[t] += 1
    return timeline

def find_peak_second(timeline):
    if not timeline:
        return 0
    return timeline.index(max(timeline))

def extract_frame_ffmpeg(mp4_path, timestamp, output_path):
    cmd = [
        'ffmpeg',
        '-ss', str(timestamp),
        '-i', mp4_path,
        '-frames:v', '1',
        '-q:v', '2',
        '-y',
        output_path
    ]
    subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def main():
    if len(sys.argv) < 2:
        print("用法: python extract_hot_frame.py 弹幕文件.xml")
        return

    xml_path = sys.argv[1]
    if not os.path.isfile(xml_path):
        print("找不到弹幕文件:", xml_path)
        return

    base_name = os.path.splitext(xml_path)[0]
    mp4_path = base_name + ".mp4"
    if not os.path.isfile(mp4_path):
        print("找不到同名视频文件:", mp4_path)
        return

    times = parse_danmaku(xml_path)
    timeline = build_timeline(times)
    peak_time = find_peak_second(timeline)

    output_img = base_name + ".jpg"
    extract_frame_ffmpeg(mp4_path, peak_time, output_img)

if __name__ == '__main__':
    main()
