import xml.etree.ElementTree as ET
from collections import Counter
import subprocess
import tempfile
import shutil
import os

# 可配置参数
XML_FILE = '录播姬_2025年05月28日19点57分_抽象山庄_高机动持盾军官.xml'  # 弹幕XML文件路径
WINDOW_SIZE = 30  # 检测窗口大小（秒）
DANMAKU_THRESHOLD = 20  # 窗口内弹幕数超过此值视为密集

def get_mp4_file(xml_file):
    base, _ = os.path.splitext(xml_file)
    mp4_file = base + '.mp4'
    if not os.path.exists(mp4_file):
        raise FileNotFoundError(f"未找到同名mp4文件: {mp4_file}")
    return mp4_file

def parse_danmaku(xml_file):
    """解析弹幕XML，返回每条弹幕出现的秒数列表"""
    tree = ET.parse(xml_file)
    root = tree.getroot()
    times = []
    for d in root.findall('d'):
        p = d.get('p')
        if p:
            try:
                stime = float(p.split(',')[0])
                times.append(int(stime))
            except Exception:
                continue
    return times

def build_timeline(times):
    """统计每秒弹幕数，返回时间线"""
    if not times:
        return []
    max_sec = max(times)
    timeline = [0] * (max_sec + 1)
    for t in times:
        timeline[t] += 1
    return timeline

def find_dense_segments(timeline, window_size, threshold):
    """滑动窗口检测密集片段，并合并相邻片段"""
    n = len(timeline)
    dense_flags = [0] * n
    window_sum = sum(timeline[:window_size])
    for i in range(n - window_size + 1):
        if i > 0:
            window_sum = window_sum - timeline[i - 1] + timeline[i + window_size - 1]
        if window_sum >= threshold:
            for j in range(i, i + window_size):
                dense_flags[j] = 1

    # 合并连续的密集片段
    segments = []
    in_segment = False
    for i, flag in enumerate(dense_flags):
        if flag and not in_segment:
            seg_start = i
            in_segment = True
        elif not flag and in_segment:
            seg_end = i - 1
            total_danmaku = sum(timeline[seg_start:seg_end + 1])
            segments.append((seg_start, seg_end, total_danmaku))
            in_segment = False
    if in_segment:
        seg_end = n - 1
        total_danmaku = sum(timeline[seg_start:seg_end + 1])
        segments.append((seg_start, seg_end, total_danmaku))
    return segments

def format_time(seconds):
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return f"{h:02d}:{m:02d}:{s:02d}"

def extract_and_concat(mp4_file, segments, output_file='dense_segments.mp4'):
    temp_dir = tempfile.mkdtemp()
    clip_files = []
    try:
        for idx, (start, end, _) in enumerate(segments, 1):
            clip_path = os.path.join(temp_dir, f'clip{idx}.mp4')
            start_time = format_time(start)
            end_time = format_time(end)
            cmd = [
                'ffmpeg', '-y',
                '-ss', start_time,
                '-to', end_time,
                '-i', mp4_file,
                '-c', 'copy',
                '-avoid_negative_ts', '1',
                clip_path
            ]
            print(' '.join(cmd))
            subprocess.run(cmd, check=True)
            clip_files.append(clip_path)
        
        # 生成 concat 列表文件
        concat_list = os.path.join(temp_dir, 'concat.txt')
        with open(concat_list, 'w', encoding='utf-8') as f:
            for clip in clip_files:
                f.write(f"file '{clip}'\n")
        
        # 合并
        concat_cmd = [
            'ffmpeg', '-y',
            '-f', 'concat',
            '-safe', '0',
            '-i', concat_list,
            '-c', 'copy',
            output_file
        ]
        print(' '.join(concat_cmd))
        subprocess.run(concat_cmd, check=True)
        print(f"已生成合并视频: {output_file}")
    finally:
        shutil.rmtree(temp_dir)

def main():
    times = parse_danmaku(XML_FILE)
    timeline = build_timeline(times)
    segments = find_dense_segments(timeline, WINDOW_SIZE, DANMAKU_THRESHOLD)
    
    if not segments:
        print("未检测到密集弹幕片段。")
        return
    
    # 先按弹幕数排序，取前5个
    top_segments = sorted(segments, key=lambda x: x[2], reverse=True)[:5]
    # 再按时间顺序排序
    top_segments.sort(key=lambda x: x[0])

    for idx, (start, end, total) in enumerate(top_segments, 1):
        print(f"片段{idx}: {format_time(start)} ~ {format_time(end)}，弹幕数: {total}")

    mp4_file = get_mp4_file(XML_FILE)
    extract_and_concat(mp4_file, top_segments)

if __name__ == '__main__':
    main()
